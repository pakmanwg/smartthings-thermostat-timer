/**
 *  Copyright 2017 pakmanw@sbcglobal.net
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  Thermostat Timer
 *
 *  Author: pakmanw@sbcglobal.net
 *
 *  Change Log
 *  2017-9-17 - v01.01 Created
 *
 */

definition(
    name: "Thermostat Timer",
    namespace: "pakmanw",
    author: "pakmanw@sbcglobal.net",
    description: "Turn off Themostat after certain amount of time",
    category: "Green Living",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/GreenLiving/Cat-GreenLiving@3x.png"
)

preferences {
    section("When switch on..."){
	input "switch1", "capability.switch"
    }
    section("When button pushed..."){
	input "button1", "capability.button"
    }
    section("Choose Thermostat(s)"){
	input "thermostat1", "capability.thermostat"
    }
    section("Minutes..."){
        input "minutes", "number", range: "1..*", title: "Minutes", required: true
    }
    section("Set temperatures") {
        input "opHeatSet", "decimal", title: "When Heating", description: "Heating temperature"
        input "opCoolSet", "decimal", title: "When Cooling", description: "Cooling temperature"
    }
    section("Default temperatures") {
        input "defHeatSet", "decimal", title: "When Heating", description: "Default Heating temperature"
        input "defCoolSet", "decimal", title: "When Cooling", description: "Default Cooling temperature"
    }
}

def installed() {
    log.debug "Installed with settings: ${settings}"
    subscribe(switch1, "switch.on", turnOnThermostat)
    subscribe(button1, "button.pushed", turnOnThermostat)
}

def updated(settings) {
    log.debug "Updated with settings: ${settings}"
    unsubscribe()
    subscribe(switch1, "switch.on", turnOnThermstat)
    subscribe(button1, "button.pushed", turnOnThermostat)
}

def turnOnThermostat(evt) {
    thermostat1.setCoolingSetpoint(opCoolSet)
    thermostat1.setHeatingSetpoint(opHeatSet)
    def delay = 60 * minutes
    runIn(delay, turnOffThermostat)
}

def turnOffThermostat() {
    switch1.off()
    thermostat1.setCoolingSetpoint(defCoolSet)
    thermostat1.setHeatingSetpoint(defHeatSet)
}
